package VindenORF;


import JavaGUI.GUI;
import java.awt.*;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.text.*;
import javax.swing.text.Highlighter.*;

/**
 *
 * @author Anne van Ewijk datum: 26-03-2017 In deze class wordt de GUI showORF
 * gemaakt. Deze toont de gevonden ORFs.
 */
public class ShowORF extends javax.swing.JFrame {
    
    private ArrayList readingFrameORF = new ArrayList();
    private ArrayList startStopORF = new ArrayList();
    private String aminozuurReadingFrame1, aminozuurReadingFrame2, aminozuurReadingFrame3, aminozuurReadingFrame_1, aminozuurReadingFrame_2, aminozuurReadingFrame_3;
    

    /**
     * Creates new form showORF
     */
    public ShowORF() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        showORF_Label = new javax.swing.JLabel();
        SHOW_Button = new javax.swing.JButton();
        templateScrollPane = new javax.swing.JScrollPane();
        templateArea = new javax.swing.JTextArea();
        complemScrollPane = new javax.swing.JScrollPane();
        complemArea = new javax.swing.JTextArea();
        dnaSeqPane = new javax.swing.JScrollPane();
        dnaSeqArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        showORF_Label.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        showORF_Label.setText("Show ORFs");

        SHOW_Button.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        SHOW_Button.setText("SHOW");
        SHOW_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SHOW_ButtonActionPerformed(evt);
            }
        });

        templateArea.setEditable(false);
        templateArea.setColumns(20);
        templateArea.setFont(new java.awt.Font("Monospaced", 0, 18)); // NOI18N
        templateArea.setRows(5);
        templateScrollPane.setViewportView(templateArea);

        complemArea.setEditable(false);
        complemArea.setColumns(20);
        complemArea.setFont(new java.awt.Font("Monospaced", 0, 18)); // NOI18N
        complemArea.setRows(5);
        complemScrollPane.setViewportView(complemArea);

        dnaSeqArea.setEditable(false);
        dnaSeqArea.setColumns(20);
        dnaSeqArea.setFont(new java.awt.Font("Courier New", 0, 12)); // NOI18N
        dnaSeqArea.setRows(5);
        dnaSeqPane.setViewportView(dnaSeqArea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(showORF_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(350, 350, 350)
                        .addComponent(SHOW_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(dnaSeqPane, javax.swing.GroupLayout.PREFERRED_SIZE, 596, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(complemScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 596, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(templateScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 596, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(37, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(showORF_Label)
                    .addComponent(SHOW_Button, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, 14, Short.MAX_VALUE)
                .addComponent(templateScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(dnaSeqPane, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(complemScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     *
     * @param evt In deze methode worden de gevonden ORFs gehighlight wanneer je
     * op de SHOW button drukt.
     */
    private void SHOW_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SHOW_ButtonActionPerformed
        ManipulatieSequentie manipulatie = new ManipulatieSequentie();
        aminozuurReadingFrame1 = ManipulatieSequentie.getAminozuurReadingFrame1();
        aminozuurReadingFrame2 = manipulatie.getAminozuurReadingFrame2();
        aminozuurReadingFrame3 = manipulatie.getAminozuurReadingFrame3();
        aminozuurReadingFrame_1 = new StringBuilder(manipulatie.getAminozuurReadingFrame_1().toUpperCase()).reverse().toString();
        aminozuurReadingFrame_2 = new StringBuilder(manipulatie.getAminozuurReadingFrame_2().toUpperCase()).reverse().toString();
        aminozuurReadingFrame_3 = new StringBuilder(manipulatie.getAminozuurReadingFrame_3().toUpperCase()).reverse().toString();

        String templateComple = manipulatie.getTemplateComple();
        dnaSeqArea.append(templateComple);

        VoorspellerORF voorspel = new VoorspellerORF();
        readingFrameORF = voorspel.getReadingFrameORF();
        startStopORF = voorspel.getStartStopORF();

        templateArea.append(aminozuurReadingFrame1 + "\n" +
                            aminozuurReadingFrame2 + "\n" +
                            aminozuurReadingFrame3 + "\n");
        complemArea.append(aminozuurReadingFrame_1 + "\n" +
                           aminozuurReadingFrame_2 + "\n" +
                           aminozuurReadingFrame_3 + "\n");
        Highlighter highlighterTemp = templateArea.getHighlighter();
        Highlighter highlighterComp = complemArea.getHighlighter();
        HighlightPainter painter = new DefaultHighlighter.DefaultHighlightPainter(Color.pink);

        for (int i = 0; i < readingFrameORF.size(); i++) {
            if (readingFrameORF.get(i).equals(1)) {
                String ss = (String) startStopORF.get(i);
                String[] stopStart = ss.split("/");
                int startKleur = Integer.parseInt(stopStart[0]);
                int stopKleur = Integer.parseInt(stopStart[1]);
                try {
                    highlighterTemp.addHighlight(startKleur / 3, stopKleur / 3, painter);
                } catch (BadLocationException ex) {
                    Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else if (readingFrameORF.get(i).equals(2)) {
                String ss = (String) startStopORF.get(i);
                String[] stopStart = ss.split("/");
                int startKleur = Integer.parseInt(stopStart[0]);
                int stopKleur = Integer.parseInt(stopStart[1]);
                try {
                    highlighterTemp.addHighlight(((startKleur - 1) / 3) + aminozuurReadingFrame1.length(), ((stopKleur - 1) / 3) + aminozuurReadingFrame1.length(), painter);
                } catch (BadLocationException ex) {
                    Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else if (readingFrameORF.get(i).equals(3)) {
                String ss = (String) startStopORF.get(i);
                String[] stopStart = ss.split("/");
                int startKleur = Integer.parseInt(stopStart[0]);
                int stopKleur = Integer.parseInt(stopStart[1]);
                try {
                    highlighterTemp.addHighlight(((startKleur + 4) / 3) + aminozuurReadingFrame1.length() + aminozuurReadingFrame2.length(), ((stopKleur + 4) / 3) + aminozuurReadingFrame1.length() + aminozuurReadingFrame2.length(), painter);
                } catch (BadLocationException ex) {
                    Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else if (readingFrameORF.get(i).equals(-1)) {
                String ss = (String) startStopORF.get(i);
                String[] stopStart = ss.split("/");
                int startKleur = Integer.parseInt(stopStart[1]);
                int stopKleur = Integer.parseInt(stopStart[0]);
                try {
                    highlighterComp.addHighlight(startKleur / 3, stopKleur / 3, painter);
                } catch (BadLocationException ex) {
                    Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else if (readingFrameORF.get(i).equals(-2)) {
                String ss = (String) startStopORF.get(i);
                String[] stopStart = ss.split("/");
                int startKleur = Integer.parseInt(stopStart[1]);
                int stopKleur = Integer.parseInt(stopStart[0]);
                try {
                    highlighterComp.addHighlight(((startKleur + 2) / 3) + aminozuurReadingFrame_1.length(), ((stopKleur + 2) / 3) + aminozuurReadingFrame_1.length(), painter);
                } catch (BadLocationException ex) {
                    Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else if (readingFrameORF.get(i).equals(-3)) {
                String ss = (String) startStopORF.get(i);
                String[] stopStart = ss.split("/");
                int startKleur = Integer.parseInt(stopStart[1]);
                int stopKleur = Integer.parseInt(stopStart[0]);
                try {
                    highlighterComp.addHighlight(((startKleur + 6) / 3) + aminozuurReadingFrame_1.length() + aminozuurReadingFrame_2.length(), ((stopKleur + 6) / 3) + aminozuurReadingFrame_1.length() + aminozuurReadingFrame_2.length(), painter);
                } catch (BadLocationException ex) {
                    Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }

        complemScrollPane.getHorizontalScrollBar().setModel(templateScrollPane.getHorizontalScrollBar().getModel());

    }//GEN-LAST:event_SHOW_ButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton SHOW_Button;
    private javax.swing.JTextArea complemArea;
    private javax.swing.JScrollPane complemScrollPane;
    private javax.swing.JTextArea dnaSeqArea;
    private javax.swing.JScrollPane dnaSeqPane;
    private javax.swing.JLabel showORF_Label;
    private javax.swing.JTextArea templateArea;
    private javax.swing.JScrollPane templateScrollPane;
    // End of variables declaration//GEN-END:variables
}
